# ... same `name`, `on`, `concurrency` as above ...

jobs:
  plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    env:
      TF_ENV: ${{ github.event.inputs.environment || 'prod' }}
      AWS_REGION: ${{ github.event.inputs.region || 'eu-west-1' }}
      AWS_DEFAULT_REGION: ${{ github.event.inputs.region || 'eu-west-1' }}
      TF_DIR: ${{ github.event.inputs.environment || 'prod' }}
    steps:
      - uses: actions/checkout@v4

      - name: Sanitize AWS secrets into env
        run: |
          printf 'AWS_ACCESS_KEY_ID=%s\n' "${{ secrets.AWS_ACCESS_KEY_ID }}"       >> "$GITHUB_ENV"
          printf 'AWS_SECRET_ACCESS_KEY=%s\n' "${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> "$GITHUB_ENV"
          # If you use temporary creds, also include the session token:
          if [ -n "${{ secrets.AWS_SESSION_TOKEN }}" ]; then
            printf 'AWS_SESSION_TOKEN=%s\n' "${{ secrets.AWS_SESSION_TOKEN }}" >> "$GITHUB_ENV"
          fi

      - name: Verify keys look sane (lengths only)
        run: |
          echo -n "$AWS_ACCESS_KEY_ID"      | wc -c
          echo -n "$AWS_SECRET_ACCESS_KEY"  | wc -c
          [ -n "$AWS_SESSION_TOKEN" ] && echo -n "$AWS_SESSION_TOKEN" | wc -c

      - name: Who am I?
        run: aws sts get-caller-identity

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"

      - name: Verify working directory
        run: |
          echo "Working in ./${{ env.TF_DIR }}"
          ls -l ./${{ env.TF_DIR }}

      - name: Terraform fmt check
        working-directory: ${{ env.TF_DIR }}
        run: terraform fmt -check

      - name: Terraform init
        working-directory: ${{ env.TF_DIR }}
        run: terraform init -upgrade -backend-config="key=${{ env.TF_ENV }}/terraform.tfstate"

      - name: Terraform plan
        working-directory: ${{ env.TF_DIR }}
        run: terraform plan -lock=false

  approve:
    name: Await Approval
    runs-on: ubuntu-latest
    needs: plan
    environment: ${{ github.event.inputs.environment || 'prod' }}
    steps:
      - run: echo "âœ… Manual approval required in the Actions UI."

  deploy:
    name: Terraform Deploy
    runs-on: ubuntu-latest
    needs: approve
    env:
      TF_ENV: ${{ github.event.inputs.environment || 'prod' }}
      AWS_REGION: ${{ github.event.inputs.region || 'eu-west-1' }}
      AWS_DEFAULT_REGION: ${{ github.event.inputs.region || 'eu-west-1' }}
      TF_DIR: ${{ github.event.inputs.environment || 'prod' }}
    steps:
      - uses: actions/checkout@v4

      - name: Sanitize AWS secrets into env
        run: |
          printf 'AWS_ACCESS_KEY_ID=%s\n' "${{ secrets.AWS_ACCESS_KEY_ID }}"       >> "$GITHUB_ENV"
          printf 'AWS_SECRET_ACCESS_KEY=%s\n' "${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> "$GITHUB_ENV"
          if [ -n "${{ secrets.AWS_SESSION_TOKEN }}" ]; then
            printf 'AWS_SESSION_TOKEN=%s\n' "${{ secrets.AWS_SESSION_TOKEN }}" >> "$GITHUB_ENV"
          fi

      - name: Who am I?
        run: aws sts get-caller-identity

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"

      - name: Terraform init
        working-directory: ${{ env.TF_DIR }}
        run: terraform init -backend-config="key=${{ env.TF_ENV }}/terraform.tfstate"

      - name: Terraform Apply
        if: ${{ github.event.inputs.action != 'destroy' }}
        working-directory: ${{ env.TF_DIR }}
        run: terraform apply -auto-approve -lock=false

      - name: Terraform Destroy
        if: ${{ github.event.inputs.action == 'destroy' }}
        working-directory: ${{ env.TF_DIR }}
        run: terraform destroy -auto-approve -lock=false
